{
  "openapi": "3.0.0",
  "info": {
    "title": "TextLab 8 API",
    "description": "TextLab 8 API",
    "contact": {
      "email": "a.krasikov@comlab-ulm.de"
    },
    "license": {
      "name": "Proprioretary",
      "url": "https://www.text-lab.de/"
    },
    "version": "1.1.0"
  },
  "servers": [
    {
      "url": "http://127.0.0.1:9090/api",
      "description": "Local 9090"
    },
    {
      "url": "http://127.0.0.1:5000/api",
      "description": "Local 5000"
    },
    {
      "url": "http://10.8.0.5:5006/api",
      "description": "VPN Thin Client PostgreSQL Alpha API (main)"
    },
    {
      "url": "http://10.8.0.5:9100/api",
      "description": "VPN PostgreSQL Alpha API"
    },
    {
      "url": "http://10.8.0.5:9091/api",
      "description": "VPN SQLite Alpha API"
    },
    {
      "url": "https://preview.text-lab.de/api/",
      "description": "Preview version API"
    },
  ],
  "tags": [
    {
      "name": "login",
      "description": "User Login/Logout Operations"
    },
    {
      "name": "open",
      "description": "Opened For All Operations (with no authtorization)"
    },
    {
      "name": "users",
      "description": "Users Manipulate Operations"
    },
    {
      "name": "groups",
      "description": "Groups Manipulate Operations"
    },
    {
      "name": "companies",
      "description": "Company Manipulate Operations"
    },
    {
      "name": "termins",
      "description": "Termins Manipulate Operations"
    },
    {
      "name": "benchmarks",
      "description": "Benchmarks Manipulate Operations"
    },
    {
      "name": "archives",
      "description": "Archives Manipulate Operations"
    },
    {
      "name": "simple",
      "description": "Simple Users Operations"
    },
    {
      "name": "admins",
      "description": "Secured Admins only Operations"
    },
    {
      "name": "superadmins",
      "description": "Super Admins only Operations!"
    },
    {
      "name": "system",
      "description": "System Operations"
    },
    {
      "name": "thin",
      "description": "Thin Client Operations"
    },
    {
      "name": "lt",
      "description": "The Language Tool Operations"
    }
  ],
  "paths": {

    "/lt/check": {
      "post": {
        "tags": [
          "lt"
        ],
	"summary": "Get LT check text result",
        "operationId": "LTCheck",
	"requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LTCheckData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Responce from LT in LT format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
 	  "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
	}
      }
    },

    "/user/registration": {
      "post": {
        "tags": [
          "thin"
        ],
        "summary": "Email confirmation",
        "operationId": "userRegistration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegisterData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/email-confirmation": {
      "post": {
        "tags": [
          "thin"
        ],
        "summary": "Email confirmation",
        "operationId": "emailConfirmation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailConfirmation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sended"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/check-email-confirmation": {
      "post": {
        "tags": [
          "thin"
        ],
        "summary": "Check Email confirmation",
        "operationId": "checkEmailConfirmation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckEmailConfirmation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Activated"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/forgot-password": {
      "post": {
        "tags": [
          "thin"
        ],
        "summary": "Forgot Password",
        "operationId": "forgotPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailConfirmation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Sended"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/reset-password": {
      "post": {
        "tags": [
          "thin"
        ],
        "summary": "Reset Password",
        "operationId": "resetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exception-words/upload": {
      "post": {
        "tags": [
          "superadmins"
        ],
        "summary": "upload exception Words by language",
        "operationId": "exceptionWordsUpload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadExceptionWords"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "sucessful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/exception-words/download": {
      "get": {
        "tags": [
          "superadmins"
        ],
        "summary": "Get all abbreviation by filter",
        "operationId": "getExceptionWordsByLanguageId",
        "parameters": [
          {
            "name": "language_id",
            "in": "query",
            "description": "language id",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string",
              "example": "en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of exception words",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadExceptionWords"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/abbreviation/upload": {
      "post": {
        "tags": [
          "superadmins"
        ],
        "summary": "upload Abbreviations by language",
        "operationId": "abbreviationUpload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadAbbreviation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "sucessful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/abbreviation/download": {
      "get": {
        "tags": [
          "superadmins"
        ],
        "summary": "Get all abbreviation by filter",
        "operationId": "getAbbreviationByLanguageId",
        "parameters": [
          {
            "name": "language_id",
            "in": "query",
            "description": "language id",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string",
              "example": "en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of abbreviations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadAbbreviation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term": {
      "get": {
        "tags": [
          "superadmins",
          "termins"
        ],
        "summary": "Get All Terms",
        "operationId": "getAllTerm",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "id",
                "words",
                "description",
                "lemma",
                "tag",
                "global_visible",
                "check_words",
                "wordcount",
                "enabled",
                "update_time",
                "create_time",
                "delete_time"
              ]
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted ( delete_time IS NULL)  ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter by id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "words",
            "in": "query",
            "description": "Filter by words",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Filter by description (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lemma",
            "in": "query",
            "description": "Filter by lemma",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by tag",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "global_visible",
            "in": "query",
            "description": "Filter by global_visible",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "check_words",
            "in": "query",
            "description": "Filter by check_words",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "wordcount",
            "in": "query",
            "description": "Filter by wordcount",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Filter by global_visible",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TermData",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "superadmins",
          "termins"
        ],
        "summary": "Add Term",
        "operationId": "addTerm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddUserTermData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Term",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term/{id}": {
      "put": {
        "tags": [
          "superadmins",
          "termins"
        ],
        "summary": "Update Term",
        "operationId": "updateTerm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of Term",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTermData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "term UPDATE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermReplacementData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term/{category_id}/{id}": {
      "put": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Update User Term",
        "operationId": "updateUserTerm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of Term",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "The id of category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserTermData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "term UPDATE",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermReplacementData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Delete User Term",
        "operationId": "deleteUserTerm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of Term",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "The id of category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "term DELETED"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term/replacement": {
      "get": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Get Terms Replacement",
        "operationId": "getTermsReplacement",
        "parameters": [
          {
            "name": "term_category_id",
            "in": "query",
            "description": "The id of Term Category",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "term_id",
            "in": "query",
            "description": "The id of Term",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "term_replacement_id",
            "in": "query",
            "description": "The id of replacement_id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "id",
                "words",
                "description",
                "lemma",
                "tag",
                "global_visible",
                "meaning",
                "update_time",
                "create_time",
                "delete_time"
              ]
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted ( delete_time IS NULL)  ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "words",
            "in": "query",
            "description": "Filter by words (LIKE format)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lemma",
            "in": "query",
            "description": "Filter by lemma (LIKE format)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by tag (LIKE format)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Term REplacement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TermReplacementData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Add replacement to term",
        "operationId": "addTermReplacement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTermReplacementData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "term replacement",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermReplacementData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term/category": {
      "post": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Add link to category for term (with no replacement)",
        "operationId": "addTermCategoryReplacement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTermCategoryReplacementData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "term category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermCategoryReplacementData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term/replacement/{replacement_id}/{term_id}/{category_id}": {
      "delete": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "delete Term Replacenment",
        "operationId": "deleteTermReplacenment",
        "parameters": [
          {
            "name": "replacement_id",
            "in": "path",
            "description": "The id of Term Replacenment",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "term_id",
            "in": "path",
            "description": "The id of Term",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "The id of Term Category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "term replacement deleted"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term/bycategory/{category_id}": {
      "get": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Get Terms by Category",
        "operationId": "getTermsByCategory",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "The id of Term Category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "id",
                "words",
                "description",
                "lemma",
                "tag",
                "global_visible",
                "check_words",
                "wordcount",
                "enabled",
                "update_time",
                "create_time",
                "delete_time"
              ]
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted ( delete_time IS NULL)  ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter by id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "words",
            "in": "query",
            "description": "Filter by words (LIKE format)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Filter by description (LIKE format)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lemma",
            "in": "query",
            "description": "Filter by lemma (LIKE format)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by tag (LIKE format)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "global_visible",
            "in": "query",
            "description": "Filter by global_visible",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "check_words",
            "in": "query",
            "description": "Filter by check_words",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "wordcount",
            "in": "query",
            "description": "Filter by wordcount",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Filter by global_visible",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Term Category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TermByCategoryData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term_category/{id}/calculate": {
      "get": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Calculate the Term Category size",
        "operationId": "calculateTermCategories",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of Term Category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful calculated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "size": {
                      "type": "integer"
                    }
                  }

                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term_category": {
      "get": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Get All Term Categories related to user",
        "operationId": "getAllTermCategories",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "id",
                "name",
                "description",
                "category_type",
                "locale_name",
                "global_visible",
                "user_id",
                "group_id",
                "company_id",
                "parent_id",
                "update_time",
                "create_time",
                "delete_time"
              ]
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted ( delete_time IS NULL)  ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter by category_id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name in multilanguage field (example: en%test% )",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 3,
              "pattern": "^(en|ru|de).+$",
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Filter by description in multilanguage field (example: en%test% )",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 3,
              "pattern": "^(en|ru|de).+$",
              "type": "string"
            }
          },
          {
            "name": "category_type",
            "in": "query",
            "description": "Filter by category_type",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locale_name",
            "in": "query",
            "description": "Filter by locale_name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "minLength": 5,
              "type": "string"
            }
          },
          {
            "name": "global_visible",
            "in": "query",
            "description": "Filter by global_visible",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "group_id",
            "in": "query",
            "description": "Filter by user_id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Filter by user_id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "parent_id",
            "in": "query",
            "description": "Filter by user_id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Companies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_1"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Add Term Category",
        "operationId": "addTermCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTermCategoryData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Term Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermCategoryData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term_category/{id}": {
      "put": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Update Term Category",
        "operationId": "updateTermCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of Term Category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTermCategoryData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Term Category",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermCategoryData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Delete Term Category",
        "operationId": "deleteTermCategory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of Term Category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "clear",
            "in": "query",
            "description": "Do not delete term category, only delete all terms in it",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "deleted"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clean": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Clean DB - for testing purpose only",
        "operationId": "getClean",
        "responses": {
          "200": {
            "description": "Cleared"
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/suggestion": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get hunspell suggestion for the word",
        "operationId": "getSuggestion",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "Set language for suggestion",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "de_DE"
            }
          },
          {
            "name": "word",
            "in": "query",
            "description": "word to find the suggestions",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "das"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cleared"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/clearcache": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Clear all cache",
        "operationId": "clearCache",
        "parameters": [
          {
            "name": "cachetype",
            "in": "query",
            "description": "Type of cache for clean (enum[0-All, 1-Terms, 2-GlobalAbbr])",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1,
                2
              ]
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "JSON string of the ids array",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "[1]"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cleared"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/languagedetect": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Automatically detecting Language",
        "operationId": "languagedetect",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LanguageDetect"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "detection result in  locale name format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LanguageDetectData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/convert/pdf": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Convert from PDF to HTML",
        "operationId": "convertPDF",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "treeTager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConvertResultData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/convert/docx": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Convert from DOCX to HTML",
        "operationId": "convertDOCX",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "treeTager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConvertResultData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/treetager": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Get tree Tager result",
        "operationId": "treeTager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddTreeTagerData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "treeTager",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TreeTagerData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/texttype": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get all text types",
        "operationId": "getTextTypes",
        "responses": {
          "200": {
            "description": "all text types enabled for this user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_2"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/benchmark_template": {
      "get": {
        "tags": [
          "admins",
          "benchmarks"
        ],
        "summary": "Get benchmark templates (admin must have right)",
        "operationId": "getBenchmarkTemplate",
        "responses": {
          "200": {
            "description": "benchmark templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_3"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "superadmins",
          "benchmarks"
        ],
        "summary": "Add benchmark templates (superadmins only)",
        "operationId": "addBenchmarkTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddBenchmarkTemplateData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "benchmark templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BenchmarkTemplateData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/benchmark_template/{id}": {
      "delete": {
        "tags": [
          "superadmins",
          "benchmarks"
        ],
        "summary": "Delete benchmark templates (superadmins only)",
        "operationId": "deleteBenchmarkTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of benchmark templates which will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "benchmark deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BenchmarkTemplateData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/benchmark/{id}": {
      "put": {
        "tags": [
          "admins",
          "benchmarks"
        ],
        "summary": "Update benchmark setting (admins with special rights).",
        "operationId": "updateBenchmarkSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of benchmark",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "number of calcelements_setting must be equal number of benchmark calcelements!",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BenchmarkPutSettingData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "benchmark updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BenchmarkData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "system",
          "benchmarks"
        ],
        "summary": "Run a benchmark",
        "operationId": "runBenchmark",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of benchmark",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BenchmarkRunData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "response depend of benchmark type",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admins",
          "benchmarks"
        ],
        "summary": "Delete benchmark (admins with special rights)",
        "operationId": "deleteBenchmark",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of benchmark which will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "benchmark deleted"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term_category/ugc": {
      "post": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Add term category relation to User Group Company",
        "operationId": "addUGCTermCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TermCategoryAddUGCData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "added"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/benchmark/ugc": {
      "post": {
        "tags": [
          "admins",
          "benchmarks"
        ],
        "summary": "Add benchmark relation to User Group Company",
        "operationId": "addUGCBenchmark",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BenchmarkAddUGCData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "added"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/benchmark/ugc/{benchmark_id}/{uid}/{gid}/{cid}": {
      "delete": {
        "tags": [
          "admins",
          "benchmarks"
        ],
        "summary": "Delete UGC relation to benchmark",
        "operationId": "deleteUGCBenchmark",
        "parameters": [
          {
            "name": "benchmark_id",
            "in": "path",
            "description": "The id of benchmark",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "uid",
            "in": "path",
            "description": "The uid",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "gid",
            "in": "path",
            "description": "The gid",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "cid",
            "in": "path",
            "description": "The cid",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/term_category/ugc/{category_id}/{uid}/{gid}/{cid}": {
      "delete": {
        "tags": [
          "admins",
          "termins"
        ],
        "summary": "Delete UGC relation to term category",
        "operationId": "deleteUGCTermCategory",
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "The id of category",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "uid",
            "in": "path",
            "description": "The uid",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "gid",
            "in": "path",
            "description": "The gid",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "cid",
            "in": "path",
            "description": "The cid",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/benchmark": {
      "get": {
        "tags": [
          "admins",
          "benchmarks"
        ],
        "summary": "Get benchmarks  with filters",
        "description": "For example for filter string is ?filter_by_field=name&filter_by_value=%mi%\nSELECT * FROM table WHERE name LIKE '%mi%'\n",
        "operationId": "getAllBenchmarks",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "id",
                "user_id",
                "group_id",
                "company_id",
                "locale_name",
                "text_type_id",
                "update_time",
                "create_time",
                "delete_time"
              ]
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted   ( delete_time IS NULL)  ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name in multilanguage field (example: en%test% )",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 3,
              "pattern": "^(en|ru|de).+$",
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Filter by description in multilanguage field (example: en%test% )",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 3,
              "pattern": "^(en|ru|de).+$",
              "type": "string"
            }
          },
          {
            "name": "locale_name",
            "in": "query",
            "description": "Filter by locale_name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "minLength": 5,
              "type": "string"
            }
          },
          {
            "name": "text_type_id",
            "in": "query",
            "description": "Filter by text_type_id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter by id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "group_id",
            "in": "query",
            "description": "Filter by group_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Filter by company_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Benchmarks with his rights. Right is an Array of arrays [[{userId, username},{gid, group name}, {cid, company name}],[{userId, username},{gid, group name}, {cid, company name}]]",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_4"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "admins",
          "benchmarks"
        ],
        "summary": "Add benchmark (admins with special rights)",
        "operationId": "addBenchmark",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BenchmarkAddData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "benchmark templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BenchmarkData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/ping": {
      "get": {
        "tags": [
          "open"
        ],
        "summary": "check  server status",
        "operationId": "ping",
        "responses": {
          "200": {
            "description": "Server Alive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_5"
                }
              }
            }
          },
          "400": {
            "description": "error"
          }
        }
      }
    },
    "/company": {
      "get": {
        "tags": [
          "companies",
          "superadmins"
        ],
        "summary": "Get companies  with filters",
        "description": "For example for filter string is ?filter_by_field=name&filter_by_value=%mi%\nSELECT * FROM table WHERE name LIKE '%mi%'\n",
        "operationId": "getAllCompanies",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "id",
                "name",
                "license_id",
                "update_time",
                "create_time",
                "delete_time"
              ]
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted   ( delete_time IS NULL)  ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "license_id",
            "in": "query",
            "description": "Filter by license id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Companies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_6"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "superadmins",
          "companies"
        ],
        "summary": "Create a new company",
        "operationId": "createCompany",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyAddData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Company created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/company/{id}": {
      "get": {
        "tags": [
          "admins",
          "companies"
        ],
        "summary": "Get company by id",
        "operationId": "getUserCompanyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The company id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "company exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyData"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "superadmins",
          "companies"
        ],
        "summary": "Change company",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of company which will be changed",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompanyChangeData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changed successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "superadmins",
          "companies"
        ],
        "summary": "Delete Company",
        "operationId": "deleteCompany",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of Company which will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/company/{id}/option": {
      "post": {
        "tags": [
          "superadmins",
          "companies"
        ],
        "summary": "Add company Option",
        "operationId": "addCompanyOption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of company",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOptionData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "superadmins",
          "companies"
        ],
        "summary": "Delete user Option",
        "operationId": "deleteCompanyOption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of company",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "option",
            "in": "query",
            "description": "The name of Option which will be deleted",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/company/{id}/license": {
      "post": {
        "tags": [
          "superadmins",
          "companies"
        ],
        "summary": "Add company license",
        "operationId": "addCompanyLicense",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of company",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddLicenseData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "superadmins",
          "companies"
        ],
        "summary": "Delete company license",
        "operationId": "deleteCompanyLicense",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of company",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "license_id",
            "in": "query",
            "description": "The id of license which will be deleted",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/usergroup": {
      "get": {
        "tags": [
          "admins",
          "groups"
        ],
        "summary": "Get usergroups  with filters",
        "description": "SELECT * FROM table WHERE name LIKE '%mi%'\n",
        "operationId": "getAllUsergroups",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Filter by name (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "id",
                "name",
                "company_id",
                "license_id",
                "update_time",
                "create_time",
                "delete_time"
              ]
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted ( delete_time IS NULL)  ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Filter by company id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Usergroups",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_7"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "admins",
          "groups"
        ],
        "summary": "Create a new user group",
        "operationId": "createUserGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupAddData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Group created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/usergroup/{id}": {
      "get": {
        "tags": [
          "admins",
          "groups"
        ],
        "summary": "Get user group credentials by id",
        "description": "(for the admins only yet)\nGet credetentals of any user\n",
        "operationId": "getUserGroupById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The user group id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupData"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "admins",
          "groups"
        ],
        "summary": "Change user group",
        "description": "(for the admins only yet)\n",
        "operationId": "changeUserGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of user group which will be changed",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupChangeData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changed successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admins",
          "groups"
        ],
        "summary": "Delete user  group",
        "operationId": "deleteUserGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of user group which will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/usergroup/{id}/option": {
      "post": {
        "tags": [
          "admins",
          "groups"
        ],
        "summary": "Add usergroup Option",
        "operationId": "addUserGroupOption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of usergroup",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOptionData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admins",
          "groups"
        ],
        "summary": "Delete usergroup Option",
        "operationId": "deleteUserGroupOption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of usergroup",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "option",
            "in": "query",
            "description": "The name of Option which will be deleted",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "Get all users with filters",
        "description": "For example for filter string is ?filter_by_field=name&filter_by_value=%mi%\nSELECT * FROM table WHERE name LIKE '%mi%'\n",
        "operationId": "getAllUser",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "id",
                "user_name",
                "company_id",
                "enabled",
                "house_number",
                "street",
                "city",
                "zip_code",
                "last_name",
                "first_name",
                "email",
                "country_id",
                "license_id",
                "language_id",
                "user_type_id",
                "user_group_id",
                "update_time",
                "create_time",
                "delete_time"
              ]
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted ( delete_time IS NULL) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Filter by company (for admins add a filter according his rigths!)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "user_group_id",
            "in": "query",
            "description": "Filter by group (for admins add a filter according his rigths!)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "user_type_id",
            "in": "query",
            "description": "Filter by user_type (for admins add a filter according his rigths!)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "language_id",
            "in": "query",
            "description": "Filter by language_id (for admins add a filter according his rigths!)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "license_id",
            "in": "query",
            "description": "Filter by license id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "country_id",
            "in": "query",
            "description": "Filter by country id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "user_name",
            "in": "query",
            "description": "Filter by name (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter by email (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "first_name",
            "in": "query",
            "description": "Filter by first_name (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "last_name",
            "in": "query",
            "description": "Filter by last_name (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "zip_code",
            "in": "query",
            "description": "Filter by zip_code (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "query",
            "description": "Filter by city (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "street",
            "in": "query",
            "description": "Filter by street (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "house_number",
            "in": "query",
            "description": "Filter by house_number (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Filter by enabled  ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_8"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "Create a new user",
        "description": "creating a user\n",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserAddData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/{id}": {
      "get": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "Get user credentials by id",
        "description": "(for the admins only yet)\nGet credetentals of any user\n",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The user id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "Change user",
        "description": "(for the admins only yet)\nChange user credentials. <b>id</b> field in body will be ignored\n",
        "operationId": "changeUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of user who will be changed",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserChangeData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Changed successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of user who will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/{id}/right": {
      "post": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "Add user Right",
        "operationId": "addUserRight",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of userd",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRightData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "Delete user Right",
        "operationId": "deleteUserRight",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of user ",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "right_id",
            "in": "query",
            "description": "The id of right which will be deleted",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "user_group_id",
            "in": "query",
            "description": "The id of group (0 - is for all groups)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/{id}/option": {
      "post": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "Add user Option",
        "operationId": "addUserOption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddOptionData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "Delete user Option",
        "operationId": "deleteUserOption",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of user",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "option",
            "in": "query",
            "description": "The name of Option which will be deleted",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/me": {
      "get": {
        "tags": [
          "users",
          "simple"
        ],
        "summary": "Get own user credentials",
        "description": "User can get his own open data after authorization\n",
        "operationId": "getUserMe",
        "responses": {
          "200": {
            "description": "user exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserData"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message": {
      "get": {
        "tags": [
          "users",
          "simple"
        ],
        "summary": "Get all messages with filters",
        "operationId": "getAllMessages",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "user_id",
                "level",
                "from_inf",
                "template",
                "text",
                "create_time",
                "read_time",
                "answer_time",
                "delete_time"
              ]
            }
          },
          {
            "name": "read_time",
            "in": "query",
            "description": "Filter by is read ( read_time IS NULL) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "answer_time",
            "in": "query",
            "description": "Filter by is answer ( answer_time IS NULL) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": " For simple user this filter is always set to  user id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Filter by level",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "enum": [
                "alert",
                "warning",
                "info"
              ]
            }
          },
          {
            "name": "from_inf",
            "in": "query",
            "description": "Filter by  from_inf field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted ( delete_time IS NULL)  ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "template",
            "in": "query",
            "description": "Filter by template",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "Filter by  text ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "answer",
            "in": "query",
            "description": "Filter by answer ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "messages exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_9"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "create user message",
        "operationId": "addUserMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageAddData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "sucessfully created"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message/{id}": {
      "get": {
        "tags": [
          "users",
          "simple"
        ],
        "summary": "Mark Message as read",
        "operationId": "getMessageById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Get the Message By ID",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "admins",
          "users"
        ],
        "summary": "Delete Message",
        "operationId": "deleteMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of Message which will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message/{id}/read": {
      "get": {
        "tags": [
          "users",
          "simple"
        ],
        "summary": "Mark Message as read",
        "operationId": "readMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of Message which will be marked as read",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/message/{id}/answer": {
      "post": {
        "tags": [
          "users",
          "simple"
        ],
        "summary": "answer user message",
        "operationId": "answerUserMessage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of Message which will be answered",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageAnswerData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "sucessfully created"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "users",
          "simple",
          "login"
        ],
        "summary": "User is signing in with Login or Email and password",
        "operationId": "loginUser",
        "requestBody": {
          "description": "In field  (login) user can put either email or login",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLoginData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "content": {}
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "users",
          "simple",
          "login"
        ],
        "summary": "User is signing out",
        "description": "Logout the authorized user. Token  must be deleted.\n",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "user successfully logout"
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/user/renew": {
      "post": {
        "tags": [
          "users",
          "simple",
          "login"
        ],
        "summary": "JWT Token Renewal Request",
        "description": "JWT Token Renewal Request. Token  must be updated.\n",
        "operationId": "renewUserToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRenewData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token successfuly updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_10"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/right": {
      "get": {
        "tags": [
          "admins"
        ],
        "summary": "Get all Rights",
        "operationId": "getAllRights",
        "responses": {
          "200": {
            "description": "Rights",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_11"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/multilang": {
      "get": {
        "tags": [
          "open"
        ],
        "summary": "Get translation  with filters",
        "description": "For example for filter string is ?filter_by_field=name&filter_by_value=%mi%\nSELECT * FROM table WHERE name LIKE '%mi%'\n",
        "operationId": "getAllmultilang",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "element_id",
              "enum": [
                "element_id",
                "table_name",
                "value_name",
                "text",
                "language_short_name"
              ]
            }
          },
          {
            "name": "element_id",
            "in": "query",
            "description": "Filter by  element id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "table_name",
            "in": "query",
            "description": "Filter by table_name  (LIKE format) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "value_name",
            "in": "query",
            "description": "Filter by value_name (LIKE format)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "Filter by text (LIKE format)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "language_short_name",
            "in": "query",
            "description": "Filter by language_short_name (LIKE format)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_12"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "superadmins"
        ],
        "summary": "Create a new translation",
        "operationId": "createTranslation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultilangData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Translation created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultilangData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Already exist!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "superadmins"
        ],
        "summary": "delete translation",
        "operationId": "deleteTranslation",
        "parameters": [
          {
            "name": "element_id",
            "in": "query",
            "description": "element_id",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "table_name",
            "in": "query",
            "description": "table_name",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "value_name",
            "in": "query",
            "description": "value_name",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          },
          {
            "name": "language_short_name",
            "in": "query",
            "description": "language_short_name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Translation deleted"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/country": {
      "get": {
        "tags": [
          "open"
        ],
        "summary": "Get all countries",
        "operationId": "getAllCountries",
        "responses": {
          "200": {
            "description": "Countries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_13"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/return_values": {
      "get": {
        "tags": [
          "open",
          "benchmarks"
        ],
        "summary": "Get all return_values",
        "operationId": "getAllReturnValues",
        "responses": {
          "200": {
            "description": "return_values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_14"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/settings": {
      "get": {
        "tags": [
          "open",
          "benchmarks"
        ],
        "summary": "Get all settings",
        "operationId": "getAllSettings",
        "responses": {
          "200": {
            "description": "return_values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_15"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/calcelement_settings": {
      "get": {
        "tags": [
          "open",
          "benchmarks"
        ],
        "summary": "Get all calcelements_settings",
        "operationId": "getAllCalcelementsSettings",
        "responses": {
          "200": {
            "description": "calcelements_settings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_16"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/calcelements": {
      "get": {
        "tags": [
          "admins",
          "benchmarks"
        ],
        "summary": "Get all calcelements",
        "operationId": "getAllCalcelements",
        "responses": {
          "200": {
            "description": "calcelements",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_17"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/options": {
      "get": {
        "tags": [
          "admins"
        ],
        "summary": "Get all options",
        "operationId": "getAlloptions",
        "responses": {
          "200": {
            "description": "options",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_18"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/license": {
      "get": {
        "tags": [
          "open"
        ],
        "summary": "Get all licenses",
        "operationId": "getAllLicenses",
        "responses": {
          "200": {
            "description": "Licenses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_19"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/usertype": {
      "get": {
        "tags": [
          "open"
        ],
        "summary": "Get all usertypes",
        "operationId": "getAllUserTypes",
        "responses": {
          "200": {
            "description": "UserTypes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_20"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country_languages": {
      "get": {
        "tags": [
          "open"
        ],
        "summary": "Get all country languages",
        "operationId": "getAllCountryLanguage",
        "parameters": [
          {
            "name": "country_short_name",
            "in": "query",
            "description": "Filter by country_short_name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "language_short_name",
            "in": "query",
            "description": "Filter by language_short_name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 2,
              "minLength": 2,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "country_languages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_21"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language": {
      "get": {
        "tags": [
          "open"
        ],
        "summary": "Get all languages",
        "operationId": "getAllLanguages",
        "responses": {
          "200": {
            "description": "language",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_22"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locale": {
      "get": {
        "tags": [
          "open"
        ],
        "summary": "Get all locales",
        "operationId": "getAllLocales",
        "responses": {
          "200": {
            "description": "locales",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inline_response_200_23"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/archive": {
      "get": {
        "tags": [
          "simple",
          "archives"
        ],
        "summary": "Get archives  with filters",
        "description": "For example for filter string is ?filter_by_field=name&filter_by_value=%mi%\nSELECT * FROM table WHERE name LIKE '%mi%'\n",
        "operationId": "getAllArchives",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "locale_name",
                "benchmark_id",
                "folder",
                "id",
                "user_id",
                "group_id",
                "company_id",
                "archive_name",
                "version",
                "hix",
                "clix",
                "update_time",
                "create_time",
                "delete_time"
              ]
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Filter by deleted   ( delete_time IS NULL)  ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "analyse_id",
            "in": "query",
            "description": "Filter by analyse_id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 50,
              "minLength": 5,
              "type": "string"
            }
          },
          {
            "name": "locale_name",
            "in": "query",
            "description": "Filter by locale_name",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 5,
              "minLength": 5,
              "type": "string"
            }
          },
          {
            "name": "archive_name",
            "in": "query",
            "description": "Filter by archive_name LIKE (%archive_name%)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "benchmark_id",
            "in": "query",
            "description": "Filter by benchmark_id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Filter by version",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "hix",
            "in": "query",
            "description": "Filter by hix",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "clix",
            "in": "query",
            "description": "Filter by clix",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "Filter by tag",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 2,
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Filter by id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "folder",
            "in": "query",
            "description": "Filter by folder",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "group_id",
            "in": "query",
            "description": "Filter by group_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Filter by company_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Archives with all additional fields.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ArchivesData"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "simple",
          "archives"
        ],
        "summary": "Add archive",
        "operationId": "addArchive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivesAddData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchivesData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/archive/{analyse_id}": {
      "delete": {
        "tags": [
          "simple",
          "archives"
        ],
        "summary": "Delete whole archive (with all versions!)",
        "operationId": "deleteArchiveAll",
        "parameters": [
          {
            "name": "analyse_id",
            "in": "path",
            "description": "The id of archive which will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minLength": 5,
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "archive deleted"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "simple",
          "archives"
        ],
        "parameters": [
          {
            "name": "analyse_id",
            "in": "path",
            "description": "The user frendly id of archive which will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minLength": 5,
              "maxLength": 50
              "type": "string"
            }
          }
        ],
        "summary": "Add archive versions",
        "operationId": "addArchive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivesAddVersionData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchivesData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/archive/{analyse_id}/{version}": {
      "put": {
        "tags": [
          "simple",
          "archives"
        ],
        "summary": "Update archive version",
        "operationId": "updateArchiveVersion",
        "parameters": [
          {
            "name": "analyse_id",
            "in": "path",
            "description": "The id of archive which will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minLength": 5,
              "maxLength": 50
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version of archive ",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": " ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchivesUpdateData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "archive updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchivesData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "simple",
          "archives"
        ],
        "summary": "Delete archive",
        "operationId": "deleteArchive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of archive which will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "archive deleted"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/archive/folder": {
      "get": {
        "tags": [
          "simple",
          "archives"
        ],
        "summary": "Get archive folders  with filters",
        "description": "For example for filter string is ?filter_by_field=name&filter_by_value=%mi%\nSELECT * FROM table WHERE name LIKE '%mi%'\n",
        "operationId": "getAllArchiveFolders",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "subfolders",
            "in": "query",
            "description": "1 - Get folder with subfolders",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "id",
              "enum": [
                "parent",
                "id",
                "user_id",
                "group_id",
                "company_id",
                "folder_name"
              ]
            }
          },
          {
            "name": "folder_name",
            "in": "query",
            "description": "Filter by folder_name LIKE (%folder_name%)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "folder_id",
            "in": "query",
            "description": "Filter by folder_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "group_id",
            "in": "query",
            "description": "Filter by group_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Filter by company_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Archive folders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ArchiveFoldersData"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "simple",
          "archives"
        ],
        "summary": "Add archive folder",
        "operationId": "addArchiveFolder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveFoldersData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "folder",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchivesData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/archive/folder/{id}": {
      "put": {
        "tags": [
          "simple",
          "archives"
        ],
        "summary": "Update archive folder",
        "operationId": "updateArchiveFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of archive folder",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": " ",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ArchiveFoldersData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "archive folder updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArchiveFoldersData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "simple",
          "archives"
        ],
        "summary": "Delete archive folder",
        "operationId": "deleteArchiveFolder",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of archive folder which will be deleted",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "archive folder deleted"
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/archive/tag": {
      "get": {
        "tags": [
          "simple",
          "archives"
        ],
        "summary": "Get archive  tags  with filters",
        "description": " ",
        "operationId": "getAllArchiveTags",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Query limit",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Query offset",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "Query order (0-ASC, 1-DESC)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "default": 0,
              "enum": [
                0,
                1
              ]
            }
          },
          {
            "name": "order_by",
            "in": "query",
            "description": "order by field",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "default": "tag_name",
              "enum": [
                "tag_name",
                "user_id",
                "group_id",
                "company_id"
              ]
            }
          },
          {
            "name": "tag_name",
            "in": "query",
            "description": "Filter by tag_name LIKE (%tag_name%)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maxLength": 255,
              "minLength": 1,
              "type": "string"
            }
          },
          {
            "name": "user_id",
            "in": "query",
            "description": "Filter by user_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "group_id",
            "in": "query",
            "description": "Filter by group_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          },
          {
            "name": "company_id",
            "in": "query",
            "description": "Filter by company_id ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "minimum": 1,
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Archive Tagss",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ArchivesAddData"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid fields supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Access token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "You are not allowed to make this action",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Record not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "LTCheckData": {
	"type": "object",
        "properties": {
          "data": {
            "maxLength": 50000,
            "type": "string",
            "example": "data=%7B%22annotation%22%3A%5B%7B%22text%22%3A%22Das+%22%2C%22offset%22%3A0%2C%22sourceIndex%22%3A%220%22%7D%2C%7B%22text%22%3A%22Herz+%22%2C%22offset%22%3A4%2C%22sourceIndex%22%3A%221%22%7D%2C%7B%22text%22%3A%22ist%22%2C%22offset%22%3A9%2C%22sourceIndex%22%3A%222%22%7D%5D%2C%22apiKey%22%3A%22UadSLVCKVqDQOCRl%22%7D&language=de-DE"
	  }
	}
      },
      "ArchiveFoldersData": {
        "type": "object",
        "properties": {
          "id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "folder_name": {
            "maxLength": 255,
            "type": "string",
            "example": "tag"
          },
          "parent": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "company_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "ArchiveTagsData": {
        "type": "object",
        "properties": {
          "tag_name": {
            "maxLength": 255,
            "type": "string",
            "example": "tag"
          }
        }
      },
      "ArchivesData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "analyse_id": {
            "minLength": 5,
            "maxLength": 50,
            "type": "string",
            "example": "f8FrO0dsQQQiy"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "name"
          },
          "text": {
            "type": "string",
            "example": "text"
          },
          "result": {
            "type": "string",
            "example": "{}"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "version": {
            "minimum": 1,
            "type": "number",
            "example": 1
          },
          "hix": {
            "minimum": 0,
            "type": "number",
            "example": 1
          },
          "clix": {
            "minimum": 0,
            "type": "number",
            "example": 1
          },
          "owner": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "folder": {
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "tags": {
            "type": "array",
            "example": [
              "tag1",
              "tag2"
            ]
          },
          "benchmark": {
              "type": "object",
              "$ref": "#/components/schemas/BenchmarkData"
          },
          "user_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "company_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "create_time": {
            "maxLength": 255,
            "type": "string"
          },
          "update_time": {
            "type": "string"
          },
          "delete_time": {
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "ArchivesAddVersionData": {
        "required": [
          "name",
          "result",
          "text",
          "benchmark_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "name"
          },
          "benchmark_id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "text": {
            "type": "string",
            "example": "text"
          },
          "result": {
            "type": "string",
            "example": "{}"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "hix": {
            "minimum": 0,
            "type": "number",
            "example": 1
          },
          "clix": {
            "minimum": 0,
            "type": "number",
            "example": 1
          },
          "folder": {
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "tags": {
            "type": "array",
            "example": [
              "tag1",
              "tag2"
            ],
            "items": {
              "type": "string",
              "example": "tag1"
            }
          },
          "user_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "company_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "ArchivesAddData": {
        "required": [
          "name",
          "result",
          "text",
          "benchmark_id"
        ],
        "type": "object",
        "properties": {
          "analyse_id": {
            "minLength": 5,
            "maxLength": 50,
            "type": "string",
            "example": "f8FrO0dsQQQiy"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "name"
          },
          "benchmark_id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "text": {
            "type": "string",
            "example": "text"
          },
          "result": {
            "type": "string",
            "example": "{}"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "hix": {
            "minimum": 0,
            "type": "number",
            "example": 1
          },
          "clix": {
            "minimum": 0,
            "type": "number",
            "example": 1
          },
          "folder": {
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "tags": {
            "type": "array",
            "example": [
              "tag1",
              "tag2"
            ],
            "items": {
              "type": "string",
              "example": "tag1"
            }
          },
          "user_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "company_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "ArchivesUpdateData": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "name"
          },
          "text": {
            "type": "string",
            "example": "text"
          },
          "result": {
            "type": "string",
            "example": "{}"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "hix": {
            "minimum": 0,
            "type": "number",
            "example": 1
          },
          "clix": {
            "minimum": 0,
            "type": "number",
            "example": 1
          },
          "folder": {
            "minimum": 0,
            "type": "integer",
            "example": 0
          },
          "tags": {
            "type": "array",
            "example": [
              "tag1",
              "tag2"
            ],
            "items": {
              "type": "string",
              "example": "tag1"
            }
          },
          "user_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "company_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },

      "CalcelementSettingsData": {
        "type": "object",
        "properties": {
          "setting_name": {
            "maxLength": 50,
            "type": "string",
            "example": "hixGoal"
          },
          "calcelement_id": {
            "maxLength": 50,
            "type": "string",
            "example": "HIXCountLib"
          },
          "type": {
            "type": "string",
            "example": "string",
            "enum": [
              "string",
              "integer",
              "array",
              "object",
              "number",
              "boolean"
            ]
          }
        }
      },
      "CalcelementsData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "depend_of": {
            "type": "string",
            "example": "[]"
          },
          "default_sort": {
            "type": "integer",
            "example": 100
          },
          "locale_name": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "de_DE"
          }
        }
      },
      "SettingsData": {
        "type": "object",
        "properties": {
          "setting_name": {
            "maxLength": 50,
            "type": "string",
            "example": "hix"
          },
          "category": {
            "maxLength": 50,
            "type": "string",
            "example": "hix"
          },
          "lib": {
            "maxLength": 50,
            "type": "string",
            "example": "hix"
          },
          "setting_values": {
            "type": "object",
            "example": {
              "min": "integer",
              "max": "integer",
              "target": "integer",
              "green_position": "integer",
              "yellow_position": "integer",
              "red_position": "integer",
              "enabled": "boolean"
            }
          },
          "limits": {
            "type": "object",
            "example": {}
          }
        }
      },
      "ReturnValuesData": {
        "type": "object",
        "properties": {
          "value_name": {
            "maxLength": 50,
            "type": "string",
            "example": "hix"
          },
          "value_type": {
            "type": "string",
            "example": "string"
          }
        }
      },
      "AddTermCategoryReplacementData": {
        "required": [
          "category_id",
          "term_id"
        ],
        "type": "object",
        "properties": {
          "term_id": {
            "type": "integer",
            "example": 1
          },
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "settings": {
            "type": "string",
            "example": "{}"
          }
        }
      },
      "TermCategoryReplacementData": {
        "type": "object",
        "properties": {
          "term_id": {
            "type": "integer",
            "example": 1
          },
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "settings": {
            "type": "string",
            "example": "{}"
          }
        }
      },
      "AddTermReplacementData": {
        "required": [
          "category_id",
          "global_visible",
          "term_id"
        ],
        "type": "object",
        "properties": {
          "words": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolviert\"]"
          },
          "lemma": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolvieren\"]"
          },
          "tag": {
            "type": "string",
            "example": "[\"ADJD\",\"VVPP\"]"
          },
          "status": {
            "type": "integer",
            "example": 1
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "meaning": {
            "type": "string",
            "example": "meaning"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "term_global_visible": {
            "type": "boolean",
            "example": true
          },
          "term_enabled": {
            "type": "boolean",
            "example": true
          },
          "term_settings": {
            "type": "string",
            "example": "{}"
          },
          "term_check_words": {
            "type": "boolean",
            "example": false
          },
          "term_description": {
            "type": "string",
            "example": "{}"
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          },
          "term_id": {
            "type": "integer",
            "example": 1
          },
          "category_id": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "TermReplacementData": {
        "type": "object",
        "properties": {
          "words": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolviert\"]"
          },
          "lemma": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolvieren\"]"
          },
          "tag": {
            "type": "string",
            "example": "[\"ADJD\",\"VVPP\"]"
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "meaning": {
            "type": "string",
            "example": "meaning"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          },
          "term_id": {
            "type": "integer",
            "example": 1
          },
          "category_id": {
            "type": "integer",
            "example": 1
          },
          "term_global_visible": {
            "type": "boolean",
            "example": true
          },
          "term_enabled": {
            "type": "boolean",
            "example": true
          },
          "term_settings": {
            "type": "string",
            "example": "{}"
          },
          "term_check_words": {
            "type": "boolean",
            "example": false
          },
          "term_description": {
            "type": "string",
            "example": "{}"
          }
        }
      },
      "AddUserTermData": {
        "required": [
          "category_id",
          "check_words",
          "lemma",
          "words"
        ],
        "type": "object",
        "properties": {
          "words": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolviert\"]"
          },
          "lemma": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolvieren\"]"
          },
          "tag": {
            "type": "string",
            "example": "[\"ADJD\",\"VVPP\"]"
          },
          "check_words": {
            "type": "boolean",
            "example": false
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          },
          "category_id": {
            "type": "integer",
            "example": 1
          }
        }
      },
      "UpdateUserTermData": {
        "required": [
          "check_words"
        ],
        "type": "object",
        "properties": {
          "check_words": {
            "type": "boolean",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          },
          "settings": {
            "type": "string",
            "example": "{}"
          }
        }
      },
      "AddTermData": {
        "required": [
          "check_words",
          "lemma",
          "words"
        ],
        "type": "object",
        "properties": {
          "words": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolviert\"]"
          },
          "lemma": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolvieren\"]"
          },
          "tag": {
            "type": "string",
            "example": "[\"ADJD\",\"VVPP\"]"
          },
          "check_words": {
            "type": "boolean",
            "example": false
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "TermByCategoryData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "words": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolviert\"]"
          },
          "lemma": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolvieren\"]"
          },
          "tag": {
            "type": "string",
            "example": "[\"ADJD\",\"VVPP\"]"
          },
          "check_words": {
            "type": "boolean",
            "example": false
          },
          "wordcount": {
            "type": "integer",
            "example": 2
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          },
          "term_replacement": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermByCategoryData_term_replacement"
            }
          }
        }
      },
      "TermData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "words": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolviert\"]"
          },
          "lemma": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolvieren\"]"
          },
          "tag": {
            "type": "string",
            "example": "[\"ADJD\",\"VVPP\"]"
          },
          "check_words": {
            "type": "boolean",
            "example": false
          },
          "wordcount": {
            "type": "integer",
            "example": 2
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "UpdateTermCategoryData": {
        "required": [
          "category_type",
          "locale_name",
          "name"
        ],
        "type": "object",
        "properties": {
          "locale_name": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "de_DE"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "{\"en\": \"en text\",\"de\": \"de text\"}"
          },
          "description": {
            "type": "string",
            "example": "{\"en\": \"en text\",\"de\": \"de text\"}"
          },
          "category_type": {
            "type": "string",
            "example": "negative"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "AddTermCategoryData": {
        "required": [
          "category_type",
          "locale_name",
          "name"
        ],
        "type": "object",
        "properties": {
          "locale_name": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "de_DE"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "{\"en\": \"en text\",\"de\": \"de text\"}"
          },
          "description": {
            "type": "string",
            "example": "{\"en\": \"en text\",\"de\": \"de text\"}"
          },
          "category_type": {
            "type": "string",
            "example": "negative"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          },
          "parent_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "TermCategoryData": {
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "locale_name": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "de_DE"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "{\"en\": \"en text\",\"de\": \"de text\"}"
          },
          "description": {
            "type": "string",
            "example": "{\"en\": \"en text\",\"de\": \"de text\"}"
          },
          "category_type": {
            "type": "string",
            "example": "negative"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          },
          "owner": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "term_count": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "parent_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "create_time": {
            "maxLength": 255,
            "type": "string"
          },
          "update_time": {
            "type": "string"
          },
          "delete_time": {
            "maxLength": 255,
            "type": "string"
          },
          "rights": {
            "type": "array",
            "description": "Array of [{userId, username},{gid, group name}, {cid, company name} ]",
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "minimum": 0,
                    "type": "integer",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "example": "Username"
                  }
                }
              }
            }
          }
        }
      },
      "AddBenchmarkTemplateData": {
        "required": [
          "default_calcelements",
          "locale_name",
          "return_values",
          "text_type_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "{\"en\":\"Benchmark name\",\"de\":\"Benchmark Name\"}"
          },
          "description": {
            "type": "string",
            "example": "{\"en\":\"Benchmark description\",\"de\":\"Benchmark description\"}"
          },
          "text_type_id": {
            "maxLength": 50,
            "type": "string",
            "example": "web"
          },
          "default_calcelements": {
            "type": "string",
            "example": "[[\"AbbreviationsLib\",100,{}],[\"TokenizerLib\",200,{}],[\"SyllableCountLib\",300,{}],[\"TreeTaggerLib\",400,{}],[\"SentenceCountLib\",500,{}],[\"WordAndCharactersCountLib\",600,{}],[\"HIXCountLib\",700,{}]]"
          },
          "locale_name": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "de_DE"
          },
          "return_values": {
            "type": "string",
            "example": "[\"hix\",\"data\"]"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          }
        }
      },
      "BenchmarkTemplateData": {
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "object",
            "example": {
              "en": "Benchmark name",
              "de": "Benchmark Name"
            }
          },
          "description": {
            "type": "object",
            "example": {
              "en": "Benchmark descr",
              "de": "Benchmark descr"
            }
          },
          "text_type_id": {
            "maxLength": 50,
            "type": "string",
            "example": "web"
          },
          "default_calcelements": {
            "type": "string",
            "example": "[[\"AbbreviationsLib\",100,{}],[\"TokenizerLib\",200,{}],[\"SyllableCountLib\",300,{}],[\"TreeTaggerLib\",400,{}],[\"SentenceCountLib\",500,{}],[\"WordAndCharactersCountLib\",600,{}],[\"HIXCountLib\",700,{}]]"
          },
          "locale_name": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "de_DE"
          },
          "return_values": {
            "type": "string",
            "example": "[\"hix\",\"data\"]"
          },
          "settings": {
            "type": "object"
          }
        }
      },
      "BenchmarkPutSettingData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "{\"en\":\"Benchmark name\",\"de\":\"Benchmark Name\"}"
          },
          "description": {
            "type": "string",
            "example": "{\"en\":\"Benchmark description\",\"de\":\"Benchmark description\"}"
          },
          "calcelements_setting": {
            "type": "string",
            "example": "{}"
          },
          "return_values": {
            "type": "string",
            "example": "[]"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          }
        }
      },
      "BenchmarkRunData": {
        "required": [
          "locale_name",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 1000000,
            "type": "string",
            "example": "This is the text"
          },
          "locale_name": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "de_DE"
          }
        }
      },
      "BenchmarkAddUGCData": {
        "required": [
          "benchmark_id"
        ],
        "type": "object",
        "properties": {
          "benchmark_id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "company_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "TermCategoryAddUGCData": {
        "required": [
          "term_category_id"
        ],
        "type": "object",
        "properties": {
          "term_category_id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "user_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "company_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "BenchmarkAddData": {
        "required": [
          "benchmark_template_id"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "{\"en\":\"Benchmark name\",\"de\":\"Benchmark Name\"}"
          },
          "description": {
            "type": "string",
            "example": "{\"en\":\"Benchmark description\",\"de\":\"Benchmark description\"}"
          },
          "benchmark_template_id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "calcelements_setting": {
            "type": "string",
            "example": "{}"
          },
          "return_values": {
            "type": "string",
            "example": "[]"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          }
        }
      },
      "BenchmarkData": {
        "required": [
          "calcelements",
          "id",
          "locale_name",
          "return_values",
          "text_type_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "benchmark_template_id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "owner": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "object",
            "example": {
              "en": "Benchmark name",
              "de": "Benchmark Name"
            }
          },
          "description": {
            "type": "object",
            "example": {
              "en": "Benchmark descr",
              "de": "Benchmark descr"
            }
          },
          "text_type_id": {
            "maxLength": 50,
            "type": "string",
            "example": "web"
          },
          "calcelements": {
            "type": "string",
            "example": "[[\"AbbreviationsLib\",100,{}],[\"TokenizerLib\",200,{}],[\"SyllableCountLib\",300,{}],[\"TreeTaggerLib\",400,{}],[\"SentenceCountLib\",500,{}],[\"WordAndCharactersCountLib\",600,{}],[\"HIXCountLib\",700,{}]]"
          },
          "locale_name": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "de_DE"
          },
          "return_values": {
            "type": "string",
            "example": "[\"hix\",\"data\"]"
          },
          "rights": {
            "type": "array",
            "description": "Array of [{userId, username},{gid, group name}, {cid, company name} ]",
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "minimum": 0,
                    "type": "integer",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "example": "Username"
                  }
                }
              }
            }
          },
          "settings": {
            "type": "object"
          }
        }
      },
      "ResetPassword": {
        "required": [
          "code",
          "language",
          "password"
        ],
        "type": "object",
        "properties": {
          "language": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          },
          "code": {
            "maxLength": 255,
            "type": "string",
            "example": "secretCode"
          },
          "password": {
            "maxLength": 255,
            "type": "string",
            "example": "newPassword"
          }
        }
      },
      "CheckEmailConfirmation": {
        "required": [
          "code",
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 255,
            "minLength": 2,
            "type": "string",
            "example": "test@test.com"
          },
          "code": {
            "maxLength": 255,
            "type": "string",
            "example": "fdgdfgdfgd"
          }
        }
      },
      "EmailConfirmation": {
        "required": [
          "email",
          "language"
        ],
        "type": "object",
        "properties": {
          "language": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          },
          "email": {
            "maxLength": 255,
            "minLength": 2,
            "type": "string",
            "example": "test@test.com"
          }
        }
      },
      "UploadAbbreviation": {
        "required": [
          "data",
          "language_id"
        ],
        "type": "object",
        "properties": {
          "language_id": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadAbbreviation_data"
            }
          }
        }
      },
      "UploadExceptionWords": {
        "required": [
          "data",
          "language_id"
        ],
        "type": "object",
        "properties": {
          "language_id": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadExceptionWords_data"
            }
          }
        }
      },
      "LanguageDetect": {
         "required": [
           "text"
         ],
         "type": "object",
         "properties": {
           "text": {
             "description": "text in HTML or Plain format",
             "type": "string"
           }
         }
       },
      "LanguageDetectData": {
         "type": "object",
         "properties": {
           "language": {
             "description": "Language in locale name format (5 letters long, see an example)",
             "data": "string",
             "maxLength": 5,
             "minLength": 5,
             "example": "DE_de"
           }
         }
       },
      "ConvertData": {
        "required": [
          "file_name",
          "data"
        ],
        "type": "object",
        "properties": {
          "file_name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "example": "file.pdf"
          },
          "data": {
            "description": "base64 encoded file source",
            "type": "string"
          }
        }
      },
      "ConvertResultData": {
        "type": "object",
        "properties": {
          "html": {
            "description": "HTML formatted text",
            "data": "string",
            "example": "<html><body>result</body></html>"
          }
        }
      },
      "AddTreeTagerData": {
        "required": [
          "locale_name",
          "text"
        ],
        "type": "object",
        "properties": {
          "locale_name": {
            "maxLength": 5,
            "minLength": 5,
            "type": "string",
            "example": "en_GB"
          },
          "text": {
            "type": "string",
            "example": "This is a text!"
          }
        }
      },
      "TreeTagerData": {
        "type": "object",
        "properties": {
          "id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TreeTagerData_result"
            }
          }
        }
      },
      "MessageAnswerData": {
        "required": [
          "answer"
        ],
        "type": "object",
        "properties": {
          "answer": {
            "type": "string",
            "example": "Answer"
          }
        }
      },
      "MessageAddData": {
        "required": [
          "from_inf",
          "level",
          "template",
          "text",
          "user_id"
        ],
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "example": "alert",
            "enum": [
              "alert",
              "warning",
              "info"
            ]
          },
          "user_id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "from_inf": {
            "maxLength": 255,
            "type": "string",
            "example": "admin"
          },
          "template": {
            "maxLength": 255,
            "type": "string",
            "example": "text_message"
          },
          "text": {
            "type": "string",
            "example": "Test message!"
          },
          "answer": {
            "type": "string",
            "example": "Test answer!"
          }
        }
      },
      "MessageData": {
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "level": {
            "type": "string",
            "example": "alert",
            "enum": [
              "alert",
              "warning",
              "info"
            ]
          },
          "user_id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "from_inf": {
            "maxLength": 255,
            "type": "string",
            "example": "admin"
          },
          "template": {
            "maxLength": 255,
            "type": "string",
            "example": "text_message"
          },
          "text": {
            "type": "string",
            "example": "Test message!"
          },
          "answer": {
            "type": "string",
            "example": "Test answer!"
          },
          "create_time": {
            "maxLength": 255,
            "type": "string"
          },
          "read_time": {
            "maxLength": 255,
            "type": "string"
          },
          "answer_time": {
            "maxLength": 255,
            "type": "string"
          },
          "delete_time": {
            "maxLength": 255,
            "type": "string"
          }
        }
      },
      "TokenRenewData": {
        "type": "object",
        "properties": {
          "ttl": {
            "minimum": 0,
            "type": "integer",
            "description": "Livetime of JWT token in seconds",
            "example": 0
          }
        }
      },
      "UserLoginData": {
        "required": [
           "identifier",
          "password"
        ],
        "type": "object",
        "properties": {
          "identifier": {
            "maxLength": 255,
            "type": "string",
            "example": "admin"
          },
          "password": {
            "maxLength": 255,
            "type": "string",
            "example": "admin"
          },
          "ttl": {
            "minimum": 0,
            "type": "integer",
            "description": "Livetime of JWT token in seconds",
            "example": 0
          }
        }
      },
      "LicensesData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "anonimous"
          }
        }
      },
      "UserTypeData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 0
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "anonimous"
          }
        }
      },
      "OptionsData": {
        "type": "object",
        "properties": {
          "name": {
            "minLength": 255,
            "type": "string",
            "example": "maximum_users"
          },
          "type": {
            "type": "string",
            "example": "string",
            "enum": [
              "string",
              "integer",
              "array",
              "object",
              "number",
              "boolean"
            ]
          },
          "level": {
            "type": "string",
            "example": "[\"user\",\"group\",\"company\",]"
          }
        }
      },
      "CountriesData": {
        "required": [
          "enable",
          "full_name",
          "short_name"
        ],
        "type": "object",
        "properties": {
          "short_name": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "DE"
          },
          "full_name": {
            "maxLength": 255,
            "type": "string",
            "example": "Deuchland"
          },
          "enable": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "CountryLanguageData": {
        "required": [
          "country_short_name",
          "language_short_name"
        ],
        "type": "object",
        "properties": {
          "country_short_name": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "DE"
          },
          "language_short_name": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          }
        }
      },
      "LanguagesData": {
        "type": "object",
        "properties": {
          "short_name": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          },
          "full_name": {
            "maxLength": 255,
            "type": "string",
            "example": "English"
          },
          "lang_name": {
            "maxLength": 255,
            "type": "string",
            "example": "English"
          }
        }
      },
      "LocalesData": {
        "type": "object",
        "properties": {
          "language_short_name": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "English"
          },
          "territory": {
            "maxLength": 255,
            "type": "string",
            "example": "English"
          },
          "country_original_name": {
            "maxLength": 255,
            "type": "string",
            "example": "English"
          }
        }
      },
      "CompanyData": {
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "company"
          },
          "company_options": {
            "$ref": "#/components/schemas/OptionData"
          },
          "company_licenses": {
            "type": "array",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "CompanyAddData": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "company"
          },
          "license_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "CompanyChangeData": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "company"
          }
        }
      },
      "RightData": {
        "required": [
          "id",
          "user_type_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "user_type_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "AddLicenseData": {
        "required": [
          "license_id"
        ],
        "type": "object",
        "properties": {
          "license_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "MultilangData": {
        "required": [
          "element_id",
          "language_short_name",
          "table_name",
          "text",
          "value_name"
        ],
        "type": "object",
        "properties": {
          "element_id": {
            "maxLength": 50,
            "type": "string"
          },
          "table_name": {
            "maxLength": 50,
            "type": "string",
            "example": "right"
          },
          "value_name": {
            "maxLength": 50,
            "type": "string",
            "example": "title"
          },
          "text": {
            "type": "string",
            "example": "This is a title!"
          },
          "language_short_name": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          }
        }
      },
      "UserData": {
        "type": "object",
        "properties": {
          "id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "user_group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "user_group_name": {
            "maxLength": 255,
            "type": "string",
            "example": "Group"
          },
          "company_id": {
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "company_name": {
            "maxLength": 255,
            "type": "string",
            "example": "Company"
          },
          "country_id": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "DE"
          },
          "user_type_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "user_type_name": {
            "maxLength": 255,
            "type": "string",
            "example": "User type"
          },
          "language_id": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          },
          "user_name": {
            "maxLength": 255,
            "type": "string",
            "example": "user"
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "example": "user@domain.com"
          },
          "password": {
            "maxLength": 255,
            "type": "string",
            "example": "password"
          },
          "first_name": {
            "maxLength": 255,
            "type": "string",
            "example": "firstname"
          },
          "last_name": {
            "maxLength": 255,
            "type": "string",
            "example": "lastname"
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "example": "street"
          },
          "house_number": {
            "maxLength": 255,
            "type": "string",
            "example": "12"
          },
          "zip_code": {
            "maxLength": 255,
            "type": "string",
            "example": "123123"
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "example": "Ulm"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "license_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "create_time": {
            "maxLength": 255,
            "type": "string"
          },
          "update_time": {
            "maxLength": 255,
            "type": "string"
          },
          "delete_time": {
            "maxLength": 255,
            "type": "string"
          },
          "user_rights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRightData"
            }
          },
          "user_options": {
            "$ref": "#/components/schemas/OptionData"
          }
        }
      },
      "UserRegisterData": {
        "required": [
          "country_id",
          "email",
          "language_id",
          "password",
          "user_name"
        ],
        "type": "object",
        "properties": {
          "country_id": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "DE"
          },
          "language_id": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          },
          "user_name": {
            "maxLength": 255,
            "type": "string",
            "example": "user"
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "example": "user@domain.com"
          },
          "password": {
            "maxLength": 255,
            "type": "string",
            "example": "password"
          },
          "first_name": {
            "maxLength": 255,
            "type": "string",
            "example": "firstname"
          },
          "last_name": {
            "maxLength": 255,
            "type": "string",
            "example": "lastname"
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "example": "street"
          },
          "house_number": {
            "maxLength": 255,
            "type": "string",
            "example": "12"
          },
          "zip_code": {
            "maxLength": 255,
            "type": "string",
            "example": "123123"
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "example": "Ulm"
          }
        }
      },
      "UserAddData": {
        "required": [
          "country_id",
          "email",
          "enabled",
          "language_id",
          "license_id",
          "password",
          "user_group_id",
          "user_name",
          "user_type_id"
        ],
        "type": "object",
        "properties": {
          "user_group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "country_id": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "DE"
          },
          "user_type_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "language_id": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          },
          "user_name": {
            "maxLength": 255,
            "type": "string",
            "example": "user"
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "example": "user@domain.com"
          },
          "password": {
            "maxLength": 255,
            "type": "string",
            "example": "password"
          },
          "first_name": {
            "maxLength": 255,
            "type": "string",
            "example": "firstname"
          },
          "last_name": {
            "maxLength": 255,
            "type": "string",
            "example": "lastname"
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "example": "street"
          },
          "house_number": {
            "maxLength": 255,
            "type": "string",
            "example": "12"
          },
          "zip_code": {
            "maxLength": 255,
            "type": "string",
            "example": "123123"
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "example": "Ulm"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "license_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "UserChangeData": {
        "type": "object",
        "properties": {
          "user_group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "country_id": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "DE"
          },
          "user_type_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "language_id": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "example": "en"
          },
          "user_name": {
            "maxLength": 255,
            "type": "string",
            "example": "user"
          },
          "email": {
            "maxLength": 255,
            "type": "string",
            "example": "user@domain.com"
          },
          "password": {
            "maxLength": 255,
            "type": "string",
            "example": "password"
          },
          "old_password": {
            "maxLength": 255,
            "type": "string",
            "example": "old password"
          },
          "first_name": {
            "maxLength": 255,
            "type": "string",
            "example": "firstname"
          },
          "last_name": {
            "maxLength": 255,
            "type": "string",
            "example": "lastname"
          },
          "street": {
            "maxLength": 255,
            "type": "string",
            "example": "street"
          },
          "house_number": {
            "maxLength": 255,
            "type": "string",
            "example": "12"
          },
          "zip_code": {
            "maxLength": 255,
            "type": "string",
            "example": "123123"
          },
          "city": {
            "maxLength": 255,
            "type": "string",
            "example": "Ulm"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "license_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "UserRightData": {
        "required": [
          "right_id",
          "user_group_id"
        ],
        "type": "object",
        "properties": {
          "right_id": {
            "minimum": 1,
            "type": "integer",
            "example": 1
          },
          "user_group_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      },
      "OptionData": {
        "type": "object",
        "example": {
          "must_change_password": "0",
          "sign_term_and_condition": "0"
        }
      },
      "AddOptionData": {
        "required": [
          "option",
          "value"
        ],
        "type": "object",
        "properties": {
          "option": {
            "maxLength": 255,
            "type": "string",
            "example": "option"
          },
          "value": {
            "maxLength": 255,
            "type": "string",
            "example": "value"
          }
        }
      },
      "UserGroupData": {
        "type": "object",
        "properties": {
          "id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "company_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "group"
          },
          "create_time": {
            "maxLength": 255,
            "type": "string"
          },
          "update_time": {
            "type": "string"
          },
          "user_group_options": {
            "$ref": "#/components/schemas/OptionData"
          }
        }
      },
      "UserGroupAddData": {
        "required": [
          "company_id",
          "name"
        ],
        "type": "object",
        "properties": {
          "company_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "group"
          }
        }
      },
      "UserGroupChangeData": {
        "type": "object",
        "properties": {
          "company_id": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "name": {
            "maxLength": 255,
            "type": "string",
            "example": "group"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Custom message"
            }
          }
        }
      },
      "inline_response_200": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermData"
            }
          }
        }
      },
      "inline_response_200_1": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TermCategoryData"
            }
          }
        }
      },
      "inline_response_200_2": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "maxLength": 50,
              "type": "string"
            }
          }
        }
      },
      "inline_response_200_3": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BenchmarkTemplateData"
            }
          }
        }
      },
      "inline_response_200_4": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BenchmarkData"
            }
          }
        }
      },
      "inline_response_200_5": {
        "type": "object",
        "properties": {
          "time": {
            "type": "integer"
          },
          "version": {
            "type": "string",
            "example": "1.2.3"
          }
        }
      },
      "inline_response_200_6": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyData"
            }
          }
        }
      },
      "inline_response_200_7": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupData"
            }
          }
        }
      },
      "inline_response_200_8": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserData"
            }
          }
        }
      },
      "inline_response_200_9": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageData"
            }
          }
        }
      },
      "inline_response_200_10": {
        "required": [
          "token"
        ],
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          }
        }
      },
      "inline_response_200_11": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RightData"
            }
          }
        }
      },
      "inline_response_200_12": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MultilangData"
            }
          }
        }
      },
      "inline_response_200_13": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountriesData"
            }
          }
        }
      },
      "inline_response_200_14": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnValuesData"
            }
          }
        }
      },
      "inline_response_200_15": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettingsData"
            }
          }
        }
      },
      "inline_response_200_16": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalcelementSettingsData"
            }
          }
        }
      },
      "inline_response_200_17": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalcelementsData"
            }
          }
        }
      },
      "inline_response_200_18": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OptionsData"
            }
          }
        }
      },
      "inline_response_200_19": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LicensesData"
            }
          }
        }
      },
      "inline_response_200_20": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserTypeData"
            }
          }
        }
      },
      "inline_response_200_21": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryLanguageData"
            }
          }
        }
      },
      "inline_response_200_22": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LanguagesData"
            }
          }
        }
      },
      "inline_response_200_23": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocalesData"
            }
          }
        }
      },
      "TermByCategoryData_term_replacement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 1
          },
          "words": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolviert\"]"
          },
          "lemma": {
            "type": "string",
            "example": "[\"erfolgreich\",\"absolvieren\"]"
          },
          "tag": {
            "type": "string",
            "example": "[\"ADJD\",\"VVPP\"]"
          },
          "description": {
            "type": "string",
            "example": "description"
          },
          "meaning": {
            "type": "string",
            "example": "meaning"
          },
          "settings": {
            "type": "string",
            "example": "{}"
          },
          "global_visible": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "UploadAbbreviation_data": {
        "required": [
          "regexp",
          "syllcount"
        ],
        "type": "object",
        "properties": {
          "regexp": {
            "type": "string",
            "example": "word"
          },
          "syllcount": {
            "minimum": 1,
            "type": "integer",
            "example": 2
          },
          "synonym": {
            "type": "array",
            "example": [
              "word"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UploadExceptionWords_data": {
        "required": [
          "syllcount",
          "word"
        ],
        "type": "object",
        "properties": {
          "word": {
            "type": "string",
            "example": "word"
          },
          "lemma": {
            "type": "string",
            "example": "word"
          },
          "syllcount": {
            "minimum": 1,
            "type": "integer",
            "example": 2
          },
          "synonym": {
            "type": "array",
            "example": [
              "word"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "TreeTagerData_result": {
        "type": "object",
        "properties": {
          "word": {
            "type": "string",
            "example": "word"
          },
          "tag": {
            "type": "string",
            "example": "NN"
          },
          "lemma": {
            "type": "string",
            "example": "word"
          },
          "begin": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          },
          "end": {
            "minimum": 0,
            "type": "integer",
            "example": 1
          }
        }
      }
    },
    "responses": {
      "BadRequestError": {
        "description": "Invalid fields supplied",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "You are not allowed to make this action",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "ConflictError": {
        "description": "Already exist!",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Record not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "description": "Bearer auth with JWT token (HS256)",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
